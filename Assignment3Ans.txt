// 1.
class Pair<K,V> {
    private K key;
    private V value;

    public Pair(K key, V value) {
        this.key = key;
        this.value = value;
    }

    public K getKey() {
        return key;
    }

    public void setKey(K key) {
        this.key = key;
    }

    public V getValue() {
        return value;
    }

    public void setValue(V value) {
        this.value = value;
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        Pair<String, Integer> pair = new Pair<>("Key", 10);
        System.out.println("Key: " + pair.getKey() + ", Value: " + pair.getValue());
    }
}
// 2.
import java.util.ArrayList;
import java.util.Collections;

class User {
    private String name;
    private int age;

    public User(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}

public class ArrayListUser {
    public static void main(String[] args) {
        ArrayList<User> users = new ArrayList<>();
        users.add(new User("Alice", 25));
        users.add(new User("Bob", 30));

        for (User user : users) {
            System.out.println("Name: " + user.getName() + ", Age: " + user.getAge());
        }

        Collections.sort(users, (user1, user2) -> user1.getAge() - user2.getAge());

        System.out.println("Sorted by age:");
        for (User user : users) {
            System.out.println("Name: " + user.getName() + ", Age: " + user.getAge());
        }
    }
}
// 3.
import java.util.ArrayList;
import java.util.Collections;

class Car implements Comparable<Car> {
    private int modalNo;
    private String name;
    private int stock;

    public Car(int modalNo, String name, int stock) {
        this.modalNo = modalNo;
        this.name = name;
        this.stock = stock;
    }

    @Override
    public int compareTo(Car car) {
        return this.stock - car.stock;
    }

    @Override
    public String toString() {
        return modalNo + " " + name + " " + stock;
    }
}

public class CarApp {
    public static void main(String[] args) {
        ArrayList<Car> cars = new ArrayList<>();
        cars.add(new Car(2013, "creta", 10));
        cars.add(new Car(2020, "MG", 13));
        cars.add(new Car(2018, "Kia", 20));
        cars.add(new Car(2017, "Audi", 45));
        cars.add(new Car(2015, "BMW", 55));

        Collections.sort(cars);

        for (Car car : cars) {
            System.out.println(car);
        }
    }
}
// 4.
import java.util.LinkedList;

class Student {
    private String name;
    private int age;
    private int mark;

    public Student(String name, int age, int mark) {
        this.name = name;
        this.age = age;
        this.mark = mark;
    }

    // Getters and setters
}

public class StudentLinkedList {
    public static void main(String[] args) {
        LinkedList<Student> students = new LinkedList<>();
        students.add(new Student("Alice", 20, 85));
        students.add(new Student("Bob", 22, 90));

        // Display the list
        for (Student student : students) {
            System.out.println("Name: " + student.getName() + ", Age: " + student.getAge() + ", Mark: " + student.getMark());
        }
    }
}
// 4. (b.)
// Ask the user to enter a Student object and print the existence of the object.
// Specify if the object is searched according to reference or content.

import java.util.LinkedList;
import java.util.Scanner;

class Student {
    private String name;
    private int age;
    private int mark;

    public Student(String name, int age, int mark) {
        this.name = name;
        this.age = age;
        this.mark = mark;
    }

    // Getters and setters
    
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Student student = (Student) obj;
        return age == student.age &&
               mark == student.mark &&
               name.equals(student.name);
    }
}

public class StudentLinkedList {
    public static void main(String[] args) {
        LinkedList<Student> students = new LinkedList<>();
        students.add(new Student("Alice", 20, 85));
        students.add(new Student("Bob", 22, 90));

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter student name: ");
        String name = scanner.nextLine();
        System.out.print("Enter student age: ");
        int age = scanner.nextInt();
        System.out.print("Enter student mark: ");
        int mark = scanner.nextInt();

        Student searchStudent = new Student(name, age, mark);
        boolean exists = students.contains(searchStudent); // Search based on content

        if (exists) {
            System.out.println("Student exists in the list.");
        } else {
            System.out.println("Student does not exist in the list.");
        }
    }
}
// 4. (c.)
// Remove a specified Student object.

import java.util.LinkedList;

public class StudentLinkedList {
    public static void main(String[] args) {
        LinkedList<Student> students = new LinkedList<>();
        students.add(new Student("Alice", 20, 85));
        students.add(new Student("Bob", 22, 90));

        Student studentToRemove = students.get(0);
        students.remove(studentToRemove);
        System.out.println("Student removed from the list.");
    }
}
// 4. (d.)
// Count the number of objects present in the list.

import java.util.LinkedList;

public class StudentLinkedList {
    public static void main(String[] args) {
        LinkedList<Student> students = new LinkedList<>();
        students.add(new Student("Alice", 20, 85));
        students.add(new Student("Bob", 22, 90));

        int count = students.size();
        System.out.println("Number of students in the list: " + count);
    }
}
// 4. (e.)
// Override equals method checking if the two Student objects share all the same values.

class Student {
    private String name;
    private int age;
    private int mark;

    public Student(String name, int age, int mark) {
        this.name = name;
        this.age = age;
        this.mark = mark;
    }

    // Getters and setters

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        Student student = (Student) obj;
        return age == student.age &&
               mark == student.mark &&
               name.equals(student.name);
    }
}
// 5.
import java.util.HashMap;

class Book {
    private int id;
    private String name;
    private String author;
    private int quantity;

    public Book(int id, String name, String author, int quantity) {
        this.id = id;
        this.name = name;
        this.author = author;
        this.quantity = quantity;
    }

    // Getters and setters
}

public class Library {
    public static void main(String[] args) {
        HashMap<Integer, Book> books = new HashMap<>();
        books.put(1, new Book(1, "Book1", "Author1", 10));
        books.put(2, new Book(2, "Book2", "Author2", 20));

        System.out.println("Collection of books in the library:");
        for (Book book : books.values()) {
            System.out.println("ID: " + book.getId() + ", Name: " + book.getName() + ", Author: " + book.getAuthor() + ", Quantity: " + book.getQuantity());
        }

        // (a.) Check if a particular book name is present in the map
        String searchBook = "Book1";
        boolean containsBook = books.values().stream().anyMatch(book -> book.getName().equals(searchBook));
        System.out.println("Book \"" + searchBook + "\" present in the library: " + containsBook);

        // (b.) Remove the value associated with a particular key value which will remove the book entry.
        int keyToRemove = 1;
        books.remove(keyToRemove);
        System.out.println("Book with ID " + keyToRemove + " removed from the library.");
    }
}
// 6.
import java.util.Scanner;
import java.util.TreeSet;

public class TreeSetExample {
    public static void main(String[] args) {
        TreeSet<Integer> numbers = new TreeSet<>();
        numbers.add(10);
        numbers.add(20);
        numbers.add(30);

        // (a.) Display the TreeSet
        System.out.println("TreeSet: " + numbers);

        // (b.) Ask the user to enter a number and search if it is present in the list or not.
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number to search: ");
        int searchNumber = scanner.nextInt();
        boolean containsNumber = numbers.contains(searchNumber);
        System.out.println("Number " + searchNumber + " present in the list: " + containsNumber);

        // (c.) Remove an element from tree
        int numberToRemove = 20;
        numbers.remove(numberToRemove);
        System.out.println("Number " + numberToRemove + " removed from the TreeSet.");
    }
}
// 7.
import java.util.Iterator;
import java.util.TreeMap;

class Address {
    private String plotNo;
    private String at;
    private String post;

    public Address(String plotNo, String at, String post) {
        this.plotNo = plotNo;
        this.at = at;
        this.post = post;
    }

    // Getters and setters
}

public class TreeMapExample {
    public static void main(String[] args) {
        TreeMap<String, Address> addressMap = new TreeMap<>();
        addressMap.put("John", new Address("123", "Street", "City1"));
        addressMap.put("Alice", new Address("456", "Avenue", "City2"));

        System.out.println("Addresses:");
        Iterator<String> iterator = addressMap.keySet().iterator();
        while (iterator.hasNext()) {
            String name = iterator.next();
            Address address = addressMap.get(name);
            System.out.println("Name: " + name + ", Address: Plot No. " + address.getPlotNo() + ", At: " + address.getAt() + ", Post: " + address.getPost());
        }
    }
}
// 8.
import java.util.HashMap;

public class AnagramChecker {
    public static void main(String[] args) {
        String str1 = "listen";
        String str2 = "silent";

        HashMap<Character, Integer> charCountMap1 = new HashMap<>();
        HashMap<Character, Integer> charCountMap2 = new HashMap<>();

        for (char c : str1.toCharArray()) {
            charCountMap1.put(c, charCountMap1.getOrDefault(c, 0) + 1);
        }

        for (char c : str2.toCharArray()) {
            charCountMap2.put(c, charCountMap2.getOrDefault(c, 0) + 1);
        }

        boolean isAnagram = charCountMap1.equals(charCountMap2);
        System.out.println("Strings are anagrams: " + isAnagram);
    }
}
9.import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        int[] arr = {4, 2, 4, 5, 2, 3, 1, 6, 7, 5};
        HashSet<Integer> set = new HashSet<>();
        System.out.println("Repeating elements in array are : ");
        for (int i = 0; i < arr.length; i++) {
            if (!set.add(arr[i])) {
                System.out.print(arr[i] + " ");
            }
        }
    }
}
10.import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        String largeString = "This is a large string with some repeating words. This string contains repeating words like is, a, string.";
        String[] words = largeString.split("\\s+");
        HashMap<String, Integer> wordFreq = new HashMap<>();
        for (String word : words) {
            wordFreq.put(word, wordFreq.getOrDefault(word, 0) + 1);
        }
        int maxFreq = 0;
        for (String word : wordFreq.keySet()) {
            if (wordFreq.get(word) > maxFreq) {
                maxFreq = wordFreq.get(word);
            }
        }
        System.out.println("Most occurring word(s) in the string:");
        for (String word : wordFreq.keySet()) {
            if (wordFreq.get(word) == maxFreq) {
                System.out.println(word);
            }
        }
    }
}
11import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        int[] arr = {3, 7, 1, 2, 8, 4, 5, 6, 10};
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int num : arr) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int smallestMissing = 1;
        while (map.containsKey(smallestMissing)) {
            smallestMissing++;
        }
        System.out.println("Smallest positive number missing in the array: " + smallestMissing);
    }
}
12.
import java.util.PriorityQueue;

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 10, 8, 7, 3, 4, 6, 5, 9};
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int num : arr) {
            minHeap.offer(num);
        }
        System.out.println("Dequeued elements of Priority Queue:");
        while (!minHeap.isEmpty()) {
            System.out.print(minHeap.poll() + " ");
        }
    }
}
