// Q1
class UnreachableObject {
    String name;

    UnreachableObject(String name) {
        this.name = name;
    }

    void display() {
        new UnreachableObject("InnerObject").show();
    }

    void show() {
        display();
    }

    @Override
    protected void finalize() throws Throwable {
        System.out.println(name + " successfully garbage collected.");
    }

    public static void main(String[] args) {
        new UnreachableObject("MainObject").show();
        System.gc();
    }
}
// Q2
class ReassigningReference {
    private String name;

    public ReassigningReference(String name) {
        this.name = name;
    }

    @Override
    protected void finalize() throws Throwable {
        System.out.println("Object " + name + " is being garbage collected.");
    }

    public static void main(String[] args) {
        ReassigningReference obj1 = new ReassigningReference("Object 1");
        ReassigningReference obj2 = new ReassigningReference("Object 2");

        obj1 = obj2; // Reassigning reference

        System.gc(); // Explicitly invoke garbage collector
    }
}
// Q3
class NullifiedReference {
    private String name;

    public NullifiedReference(String name) {
        this.name = name;
    }

    @Override
    protected void finalize() throws Throwable {
        System.out.println("Object " + name + " is being garbage collected.");
    }

    public static void main(String[] args) {
        NullifiedReference obj = new NullifiedReference("Object");

        obj = null; // Nullify reference

        System.gc(); // Explicitly invoke garbage collector
    }
}
4.class AnonymousObject {
    String name;

    AnonymousObject(String name) {
        this.name = name;
    }

    public void finalize() {
        System.out.println(name + " is being garbage collected.");
    }

    public static void main(String[] args) {
        // Creating an anonymous object
        new AnonymousObject("Anonymous");

        // Invoking garbage collector
        System.gc();
    }
}
5.public class DataClass {
    private int integerValue;
    private double doubleValue;

    public void initialize(int integerValue, double doubleValue) {
        this.integerValue = integerValue;
        this.doubleValue = doubleValue;
    }

    public void setIntValue(int integerValue) {
        this.integerValue = integerValue;
    }

    public void setDoubleValue(double doubleValue) {
        this.doubleValue = doubleValue;
    }

    public void updateValues(int intValueToAdd, double doubleValueToAdd) {
        this.integerValue += intValueToAdd;
        this.doubleValue += doubleValueToAdd;
    }

    public static void main(String[] args) {
        Runtime runtime = Runtime.getRuntime();
        long initialMemory = runtime.totalMemory() - runtime.freeMemory();
        
        DataClass obj1 = new DataClass();
        obj1.initialize(10, 3.14);
        
        DataClass obj2 = new DataClass();
        obj2.initialize(20, 6.28);

        long allocatedMemoryAfterCreation = runtime.totalMemory() - runtime.freeMemory();
        long objectMemory = allocatedMemoryAfterCreation - initialMemory;

        obj1 = null;
        obj2 = null;

        runtime.gc();

        long memoryAfterGC = runtime.totalMemory() - runtime.freeMemory();
        long memoryOccupiedByGarbage = objectMemory - (allocatedMemoryAfterCreation - memoryAfterGC);

        System.out.println("Total Memory Allocated: " + allocatedMemoryAfterCreation);
        System.out.println("Memory Occupied by Objects: " + objectMemory);
        System.out.println("Memory Occupied by Garbage: " + memoryOccupiedByGarbage);
    }
}
6.import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class MemoryIntensiveProgram {
    public static void main(String[] args) {
        List<Object> objects = new ArrayList<>();
        Runtime runtime = Runtime.getRuntime();
        
        long startTime = System.currentTimeMillis();
        long startHeapSize = runtime.totalMemory() - runtime.freeMemory();

        for (int i = 0; i < 1000000; i++) {
            objects.add(new byte[1024]); // Creating objects of size 1KB
        }

        long endTime = System.currentTimeMillis();
        long endHeapSize = runtime.totalMemory() - runtime.freeMemory();

        System.out.println("Start Time: " + new Date(startTime));
        System.out.println("End Time: " + new Date(endTime));
        System.out.println("Start Heap Size: " + startHeapSize);
        System.out.println("End Heap Size: " + endHeapSize);
    }
}
7.public class Student {
    private String name;
    private int id;
    private String course;

    public Student(String name, int id, String course) {
        this.name = name;
        this.id = id;
        this.course = course;
    }

    // Getters and setters

    @Override
    protected void finalize() throws Throwable {
        System.out.println("Student object with ID " + id + " has been successfully garbage collected.");
        super.finalize();
    }

    public static void main(String[] args) {
        Runtime runtime = Runtime.getRuntime();
        long initialMemory = runtime.totalMemory() - runtime.freeMemory();

        Student student1 = new Student("John", 1001, "Computer Science");
        Student student2 = new Student("Alice", 1002, "Mathematics");

        // Use students

        student1 = null;
        student2 = null;

        runtime.gc();

        long memoryAfterGC = runtime.totalMemory() - runtime.freeMemory();

        System.out.println("Memory before garbage collection: " + initialMemory);
        System.out.println("Memory after garbage collection: " + memoryAfterGC);
    }
}

